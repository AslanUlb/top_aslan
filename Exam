#include <iostream>
#include<fstream>
#include<cstring>
#include<conio.h>
#include <io.h>

using namespace std;

const int a = 1000;

struct TRAIN
{
	char pointA[15];
	char pointB[15];
	char numberTrain[15];
	int time_dep[2];
};

void LoadDataTrain(TRAIN* n, int& size)
{
	FILE* f;
	struct _finddata_t myfileinfo;
	intptr_t done = _findfirst("train.txt", &myfileinfo);
	if (done == -1) {
		fopen_s(&f, "train.txt", "wb");
		fclose(f);
	}
	fopen_s(&f, "train.txt", "rb");
	while (!feof(f)) {
		fread(&n[size], sizeof(TRAIN), 1, f);
		size++;
	}
	fclose(f);
	size--;
	cout << size;

}
void save_file_tr(TRAIN* n, int& size) {
	FILE* f;
	//const char* filename = "train.txt";
	//const char* filename = "FirstFile.txt";
	fopen_s(&f, "train.txt", "wb");
	fwrite(&n[0], sizeof(TRAIN), size, f);
	fclose(f);
}

void add_train(TRAIN n[], int& size) {
	// создаем новую структуру
	TRAIN newtr;

	// заполняем ее поля значениями с клавиатуры
	if (size <= a)
	{
		cout << "Пункт отправления: ";
		cin >> newtr.pointA;
		cout << "Пункт прибытия: ";
		cin >> newtr.pointB;
		cout << "Номер поезда: ";
		cin >> newtr.numberTrain;
		cout << "Время отправления: ";
		cout << "Час отправления: ";
		cin >> newtr.time_dep[0];
		cout << "Минуты отправления: ";
		cin >> newtr.time_dep[1];
		// добавляем новую структуру в массив
		n[size] = newtr;
		// увеличиваем количество элементов в массиве на 1
		size++;
	}
	else
	{
		cout << "Превышено максимальное значение элементов структуры";
	}
}

void sort_train(TRAIN n[], int size) {
	for (size_t i = 0; i < size - 1; i++)
		for (size_t j = i + 1; j < size; j++)
			if(strcmp(n[i].numberTrain, n[j].numberTrain) > 0) //(n[i].numberTrain > n[j].numberTrain) 
			{
				TRAIN tmp = n[i];
				n[i] = n[j];
				n[j] = tmp;
			}
}

void delete_train(TRAIN a[], int& size) {
	char dell_train[15];
	int dell_i;
	cout << "Введите удаляемый номер поезда:";
	cin >> dell_train;
	cout << size << endl;
	for (int i = 0; i < size; i++)
		if (!strcmp(a[i].numberTrain, dell_train))
		{
			dell_i = i;
			break;
		}
	if (size > 1)
		for (size_t i = dell_i; i < size; i++)
			a[i] = a[i + 1];
	size--;
}

void search_pointA(TRAIN n[], char c[], int size) {
	for (int i = 0; i < size; i++) {
		if (strcmp(c, n[i].pointA) == 0)
		{
			cout << "\t" << n[i].pointA << endl;
			cout << "\t" << n[i].pointB << endl;
			cout << "\t" << n[i].numberTrain << endl;
			cout << "\t" << n[i].time_dep[0] << ":" << n[i].time_dep[1] << endl;
		}
		system("pause");
		break;
	}
}

void search_pointB(TRAIN n[], char c[], int size) {
	for (int i = 0; i < size; i++) {
		if (strcmp(c, n[i].pointB) == 0)
		{
			cout << "\t" << n[i].pointA << endl;
			cout << "\t" << n[i].pointB << endl;
			cout << "\t" << n[i].numberTrain << endl;
			cout << "\t" << n[i].time_dep[0] << ":" << n[i].time_dep[1] << endl;
		}
		system("pause");
		break;
	}
}

void search_num_Tr(TRAIN n[], char c[], int size) {
	for (int i = 0; i < size; i++) {
		if (strcmp(c, n[i].numberTrain) == 0)
		{
			cout << "\t" << n[i].pointA << endl;
			cout << "\t" << n[i].pointB << endl;
			cout << "\t" << n[i].numberTrain << endl;
			cout << "\t" << n[i].time_dep[0] << ":" << n[i].time_dep[1] << endl;
		}
		system("pause");
		break;
	}
}

void train_search(TRAIN n[], int size) {
	cout << "Выберите параметр поиска" << endl;
	cout << "1 - Поиск по Пункту отправления" << endl;
	cout << "2 - Поиск по Назначения" << endl;
	cout << "3 - Поиск по номеру поезда" << endl;
	int b;
	cin >> b;
	char c[15];
	cout << "Введите искомый элемент: " << endl;
	cin >> c;
	switch (b) {
	case 1:
		search_pointA(n, c, size);
		break;
	case 2:
		search_pointB(n, c, size);
		break;
	case 3:
		search_num_Tr(n, c, size);
		break;

	default:
		cout << "Ошибка выбора!";
	}
}

void print(TRAIN n[], int size) {
	for (size_t i = 0; i < size; i++)
	{
		cout << "Поезд № " << i + 1 << endl;
		cout << "\t" << n[i].pointA << endl;
		cout << "\t" << n[i].pointB << endl;
		cout << "\t" << n[i].numberTrain << endl;
		cout << "\t" << n[i].time_dep[0]<<":"<< n[i].time_dep[1] << endl;
	}
	system("pause");
}

int main() {
	TRAIN n[a];
	int k, size = 0;
	setlocale(LC_ALL, "ru");
	LoadDataTrain(n, size);
	do
	{
		system("cls");
		cout << "1 Добавление данных" << endl;
		cout << "2 Удаление записи" << endl;
		cout << "3 Печать списка" << endl;
		cout << "4 Поиск " << endl;
		cout << "5 Cортировка по номеру поезда" << endl;
		cout << "0 Выход " << endl;
		cin >> k;

		switch (k) {
		case 1:
			add_train(n, size);
			break;
		case 2:
			delete_train(n, size);
			break;
		case 3:
			print(n, size);
			break;
		case 4:
			train_search(n, size);
			break;
		case 5:
			sort_train(n, size);
			break;

		}
	} while (k != 0);
	save_file_tr(n, size);
	return 0;
}
